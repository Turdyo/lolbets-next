generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model League {
  id        Int      @id
  image_url String?
  name      String
  slug      String
  isCustom  Boolean? @default(false)
  match     Match[]
}

model Match {
  id               Int       @id
  begin_at         DateTime?
  end_at           DateTime?
  name             String
  slug             String
  number_of_games  Int
  scheduled_at     DateTime
  status           Status
  stream           String?
  bets_distributed Boolean   @default(false)

  games     Game[]
  league    League? @relation(fields: [league_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  league_id Int?
  winner    Team?   @relation(name: "winner", fields: [winner_id], references: [id])
  winner_id Int?
  opponents Team[]
  bets      Bet[]
}

model Game {
  id        Int       @id
  position  Int
  status    Status
  begin_at  DateTime?
  end_at    DateTime?
  complete  Boolean
  finished  Boolean
  length    Int?
  winner_id Int?
  match     Match     @relation(fields: [match_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  match_id  Int
}

model Team {
  id        Int      @id
  isCustom  Boolean? @default(false)
  acronym   String
  image_url String
  location  String?
  name      String   @unique
  slug      String
  match     Match[]
  match_won Match[]  @relation(name: "winner")
  bets      Bet[]
}

enum Status {
  not_started
  running
  finished
  canceled
}

model Bet {
  id     String @id @default(cuid())
  amount Int

  match   Match   @relation(fields: [matchId], references: [id], onDelete: Cascade)
  matchId Int
  team    Team    @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId  Int
  user    User?   @relation(fields: [userId], references: [discordId], onDelete: Cascade)
  userId  String?
}

model User {
  id        String   @id @unique
  discordId String   @unique
  name      String
  image_url String
  points    Int      @default(500)
  isAdmin   Boolean? @default(false)
  bets      Bet[]

  auth_session Session[]
  key          Key[]
}

model Session {
  id             String @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  user           User   @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model Key {
  id              String  @id @unique
  hashed_password String?
  user_id         String
  user            User    @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}
